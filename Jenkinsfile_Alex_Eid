pipeline {
    agent any
    environment {
        VIRTUAL_ENV = 'venv'
        PYTHONIOENCODING = 'utf-8'
    }

    stages {
        stage('Setup') {
            steps {
                script {
                    if (!fileExists("${env.WORKSPACE}/${VIRTUAL_ENV}")) {
                        bat "python -m venv ${VIRTUAL_ENV}"
                    }
                bat "call ${VIRTUAL_ENV}\\Scripts\\activate && pip install -r requirements.txt"
                }
            }
        }
        
        stage('Lint') {
            steps {
                script {
                    bat "call ${VIRTUAL_ENV}\\Scripts\\activate && flake8 app.py"
                }
            }
        }

        stage('Test') {
            steps {
                script {
                    try {
                        bat "call ${VIRTUAL_ENV}\\Scripts\\activate && set PYTHONPATH=%WORKSPACE% && pytest"
                    }
                    catch (Exception e) {
                        echo "${e}"
                    }
                }
            }
        }

        stage('Coverage') {
            steps {
                script {
                    bat "call ${VIRTUAL_ENV}\\Scripts\\activate && coverage run -m unittest discover -s tests"
                    bat "call ${VIRTUAL_ENV}\\Scripts\\activate && coverage report"
                }
            }
        }

        stage('Security Scan') {
            steps {
                script {
                    bat "call ${VIRTUAL_ENV}\\Scripts\\activate && bandit -r . --exit-zero"

                }
            }
        }

        stage('Deploy') {
            steps {
                script {
                    echo "Deploying application..."
                    def remoteHost = "192.168.1.121"
                    def remoteUser = "alexe"
                    def privateKeyPath = "C:\Users\alexe\OneDrive\Desktop\UNI\10_Fall 2023-2024\EECE 435L\AlexEid_Lab10\id_rsa"
                    try {
                        bat """
                            ssh -i ${privateKeyPath} ${remoteUser}@${remoteHost} 'cd /deploy && python app.py'
                        """
                    } catch (Exception e) {
                        echo "Deployment failed: ${e}"
                    }
                }
            }
        }
    }

    post {
        always {
            cleanWs()
        }
    }
}